name: CI
on:
  pull_request:
  schedule:
    - cron: '0 6 * * *'
env:
  NAMESPACE: community
  COLLECTION_NAME: lbry

jobs:

###
# Sanity tests (REQUIRED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_sanity.html

  sanity:
    name: Sanity (Ⓐ${{ matrix.ansible }})
    strategy:
      matrix:
        ansible:
          - stable-2.11
    runs-on: ubuntu-latest
    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: Run sanity tests
        run: ansible-test sanity --docker -v --color
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

# RC - TODO NO UNITS YET
###
# Unit tests (OPTIONAL)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_units.html

#  units:
#    runs-on: ubuntu-latest
#    name: Units (Ⓐ${{ matrix.ansible }})
#    strategy:
      # As soon as the first unit test fails, cancel the others to free up the CI queue
#      fail-fast: true
#      matrix:
#        ansible:
          # - stable-2.9 # Only if your collection supports Ansible 2.9
#          - stable-2.10
#          - stable-2.11
#          - stable-2.12
#          - devel

#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#        with:
#          path: ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
          # it is just required to run that once as "ansible-test units" in the docker image
          # will run on all python versions it supports.
#          python-version: 3.8

#      - name: Install ansible-base (${{ matrix.ansible }})
#        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # OPTIONAL If your unit test requires Python libraries from other collections
      # Install them like this
#      - name: Install collection dependencies
#        run: ansible-galaxy collection install ansible.netcommon ansible.utils -p .

      # Run the unit tests
#      - name: Run unit test
#        run: ansible-test units -v --color --docker --coverage
#        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

        # ansible-test support producing code coverage date
#      - name: Generate coverage report
#        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
#        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      # See the reports at https://codecov.io/gh/GITHUBORG/REPONAME
#      - uses: codecov/codecov-action@v1
#        with:
#          fail_ci_if_error: false

  integration_matrix:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ansible_collections/community/lbry
    outputs:
      matrix: ${{ steps.json-list.outputs.modules-to-test }}

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/community/lbry

      - name: Generate module list
        run: |
          find tests/integration/targets -type d -maxdepth 1 -not -name 'setup*' | cut -d '/' -f4 | sort | awk NF | jq -sRc 'split("\n") | map(select(length > 0))' > int_test_modules.json
      - name: Set output variable
        id: json-list
        run: |
          output=$(cat int_test_modules.json)
          echo "::set-output name=modules-to-test::$output"
          echo "$output"

  integration:
    needs: integration_matrix
    runs-on: ubuntu-latest
    name: I (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }}) - ${{ matrix.lbry_module }}
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - stable-2.11
        python:
          - 3.7
        lbry_module: ${{ fromJson(needs.integration_matrix.outputs.matrix) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      - name: Set up Python - ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      #- name: Rejig python
      #  run: |
      #    unlink python3 && unlink pip3 || true;
      #    cd /opt/hostedtoolcache/Python/3.7.15/x64/bin/
      #    link ./python3 python3
      #    link ./pip3 pip3

      - name: Install pip packages
        run: pip3 install docker requests --user

      - name: Install coverage
        run: pip3 install coverage --user

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip3 install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: Build and install collection
        run: ansible-galaxy collection build && ansible-galaxy collection install community-lbry-*.tar.gz
        working-directory: ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      - name: Install community.docker
        run: ansible-galaxy collection install community.docker -p /home/runner/.ansible/collections

      - name: Run Playbook to setup regtest env
        run: ansible-playbook -v -l localhost ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}/tests/integration/targets/setup_regtest/vagrant/regtest.yml -b

      # Run the integration tests
      - name: Run integration test - ${{ matrix.lbry_module }} - ${{ matrix.python }} - ${{ matrix.ansible }}
        run: ansible-test integration -vvv --color --retry-on-error --continue-on-error --diff --python ${{ matrix.python }} --coverage ${{ matrix.lbry_module }}
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      # - name: Generate coverage report
      #   run: ansible-test coverage xml -v --requirements --group-by command --group-by version
      #   working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      # See the reports at https://codecov.io/gh/GITHUBORG/REPONAME
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false
