---
- name: Setup regtest environment
  hosts: 
    - all
    - localhost
  vars_files:
    - ./vars.yml

  tasks:

  - name: Run apt-get update
    apt:
      update_cache: yes
    retries: 5

  - name: Install required packages
    package:
      name: "{{ required_packagesÂ }}"
      state: present
    retries: 5

  #- shell: ls -lh /opt/hostedtoolcache/Python/3.7.15/x64/bin/

  - name: Install pip packages
    pip:
      name: "{{ pip_packages }}"
      state: present
      executable: /opt/hostedtoolcache/Python/3.7.15/x64/bin/pip3
    retries: 5

  - name: Debug
    debug:
      var: ansible_python_interpreter

  - name: Add dockers gpg key
    shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    args:
      creates: /usr/share/keyrings/docker-archive-keyring.gpg
    retries: 5

  - name: Add the stable docker repo 
    shell: |
      echo \
       "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    args:
      creates: /etc/apt/sources.list.d/docker.list
    retries: 5

  - name: Apt update
    shell: apt update -y
    retries: 5

  - name: Install docker
    package:
      name: "{{ docker_packages }}"
      state: present
    retries: 5

  - name: Ensure the docker service is started 
    service:
      name: docker
      state: started
      enabled: yes

  - name: Create lbry docker network
    community.docker.docker_network:
      name: lbry

  - name: Create lbry group
    group: 
      name: lbry
      state: present

  - name: Create lbry user
    user:
      name: lbry
      shell: /bin/bash
      groups: 
        - lbry
        - users
        - docker

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      groups: docker
      append: yes

  - name: Create required directories
    file:
      path: "{{ item }}"
      state: directory
      owner: lbry
      group: lbry
    with_items:
      - "/home/lbry/etc/"

  - name: Download a lbrycrd release
    unarchive:
      src: "{{ lbrycrd_release }}"
      dest: /home/lbry
      remote_src: yes
      owner: lbry
      group: lbry
    retries: 5

  - name: Create directories
    file:
      name: "{{ item }}"
      state: directory
      owner: lbry
      group: lbry
    with_items:
      - /home/lbry/.lbrycrd

  - name: Create lbrycrd.conf 
    copy:
      content: |
        txindex=1
        server=1
        daemon=1
        rpcuser=lbry
        rpcpassword=lbry
        dustrelayfee=0.00000001
        rpcport=29245
        rpcbind=0.0.0.0
        rpcallowip=0.0.0.0/0
        regtest=1
      dest: /home/lbry/.lbrycrd/lbrycrd.conf

  - name: Create a service file for lbrycrd.conf
    copy:
      content: |
        [Unit]
        Description="LBRYcrd daemon"
        After=network.target

        [Service]
        ExecStart=/home/lbry/lbrycrdd -datadir="/home/lbry/.lbrycrd"
        User=lbry
        Group=lbry
        Restart=on-failure
        KillMode=process

        [Install]
        WantedBy=multi-user.target
      dest: /etc/systemd/system/lbrycrdd.service

  - name: Reload daemon
    systemd:
      daemon_reload: yes

  - name: Start the lbrycrdd service 
    service:
      name: lbrycrdd
      state: started
      enabled: yes

  - name: Ensure the lbrycrdd service is listening 
    wait_for:
      port: 29245

  # TODO Need to pause of verify the server is ready here
  - pause:
      seconds: 5

  - name: Generate some coins
    shell: |
      runuser -u lbry -- ./lbrycrd-cli -rpcuser=lbry -rpcpassword=lbry -rpcport=29245 -regtest generate 120 && touch coins.success
    args:
     creates: coins.success
     chdir: /home/lbry
    become: yes
    #when: False

  - name: Start an elastic server in a container
    docker_container:
      name: es01
      image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
      env:
        "node.name": "es01"
        "discovery.type": "single-node"
        "indices.query.bool.max_clause_count": "8192"
        "bootstrap.memory_lock": "true"
        "ES_JAVA_OPTS": "-Xms1g -Xmx1g"
      ulimits: 
        - memlock:-1:-1
      ports:
        - 127.0.0.1:9200:9200
      volumes:
        - es01:/usr/share/elasticsearch/data
      networks:
        - name: "lbry"
    retries: 5
    register: elastic

  - name: Wait for the elastic container to become active
    wait_for:
      port: 9200
      delay: 30
    when: elastic.changed

  - name: debug - walletserver cannot connect to lbrycrdd
    shell: ps aux | grep 29245
    ignore_errors: true

  - name: Check lbrycrdd
    shell: systemctl status lbrycrdd
    ignore_errors: true

  - name: debug - read lbrycrdd log
    #shell: find /home/lbry -name '*.log'
    shell: tail -n 100 /home/lbry/.lbrycrd/regtest/debug.log
    ignore_errors: true

  - shell: ping 8.8.8.8 && ping google.com

  - name: Start a wallet server in a container
    docker_container:
      name: walletserver
      image: lbry/wallet-server:v0.105.0
      ports:
        - "127.0.0.1:50001:50001/tcp" # rpc port
        - "127.0.0.1:2112:2112"
      env:
        "DB_DIRECTORY": "/database"
        "DAEMON_URL": "http://lbry:lbry@172.17.0.1:29245"  # host ip of the docker host on default network
        "MAX_QUERY_WORKERS": "4"
        "CACHE_MB": "1024"
        "MAX_SEND": "1000000000000000000"
        "MAX_RECEIVE1": "000000000000000000"
        "MAX_SESSIONS": "100000"
        "HOST": "0.0.0.0"
        "TCP_PORT": "50001"
        "PROMETHEUS_PORT": "2112"
        "FILTERING_CHANNEL_IDS": "770bd7ecba84fd2f7607fb15aedd2b172c2e153f 95e5db68a3101df19763f3a5182e4b12ba393ee8"
        "BLOCKING_CHANNEL_IDS": "dd687b357950f6f271999971f43c785e8067c3a9 06871aa438032244202840ec59a469b303257cad b4a2528f436eca1bf3bf3e10ff3f98c57bd6c4c6"
        "ELASTIC_PORT": "9200"
        "ELASTIC_HOST": "es01"
        "ALLOW_LAN_UDP": "True"
        "ALLOW_LOCALHOST": " True"
        "NET": "regtest"
      volumes:
        - "wallet_server:/database"
      networks:
        - name: "lbry"
    retries: 5
    register: walletserver

  - name: debug - walletserver cannot connect to lbrycrdd
    shell: ps aux | grep 29245
    ignore_errors: true

  - name: debug - read lbrycrdd log
    shell: tail -n 100 /home/lbry/.lbrycrd/regtest/debug.log
    ignore_errors: true

  #- name: Wait for the walletserver to become active
  #  wait_for:
  #    port: 50001
  #    delay: 30
  #  when: walletserver.changed

  - name: Create the daemon_settings.yml file
    copy:
      content: |
        blockchain_name: lbrycrd_regtest
        lbryum_servers:
          - walletserver:50001
        wallets:
          - default_wallet
        use_upnp: false
        allowed_origin: "*"
        streaming_server: "0.0.0.0:5280"
        api: "0.0.0.0:5279"
      dest: /home/lbry/etc/daemon_settings.yml
      mode: 0666
      owner: lbry
      group: lbry

  - name: Start a lbrynet docker container
    docker_container:
      name: lbrynet
      image: lbry/lbrynet:v0.99.0
      ports:
        - "127.0.0.1:5279:5279"
        - "127.0.0.1:5280:5280"
      volumes:
        - "lbrynet:/home/lbrynet"
        - "/home/lbry/etc:/etc/lbry:Z" #Put your daemon_settings.yml here
      networks:
        - name: lbry
    retries: 5
  
  - name: Wait for the lbrynet server to become active
    wait_for:
      port: 5279
      delay: 3

  - name: Ensure all docker containers are still running
    docker_container:
      name: "{{ item }}"
      state: "started"
    retries: 5
    loop:
      - "lbrynet"
      - "walletserver"
      - "es01"

  - name: Check container status
    shell: docker logs {{ item  }}
    loop:
      - "lbrynet"
      - "walletserver"
      - "es01"

  - name: Ensure lbrynet server components are fully loaded
    community.lbry.lbry_status:
    register: result
    until: "result.result.startup_status.values() is all"
    retries: 25
    delay: 10
    #ignore_errors: yes

  #- debug:
  #    var: result

  - name: Create a new address for the default account.
    community.lbry.lbry_address_unused:
    register: result

  - name: Set the address variable
    set_fact:
      my_new_address: "{{ result.address }}"

  - name: Generate some coins to the address - module?
    shell: |
      ./lbrycrd-cli -regtest generatetoaddress {{ generate1 | default(200) }} {{ my_new_address }}
      ./lbrycrd-cli -regtest generate {{ generate1 | default(100) }}
    args:
      chdir: /home/lbry
    become_user: lbry
    become: yes

  - name: Wait for wallet_balance to become available
    community.lbry.lbry_wallet_balance:
    register: wallet
    retries: 99
    delay: 10
    until: "wallet.balance.available == '{{ generate1 | default(200) }}.0'"
    #ignore_errors: yes

  - debug:
      var: wallet

  - name: Generate some more blocks
    shell: |
      ./lbrycrd-cli -regtest generate {{ generate3 | default(100) }} 
    args:
      chdir: /home/lbry
    become_user: lbry
    become: yes

  # TODO Find a better way of confirming when the balance is spendable - Long pause does not work??
  # - name: The "available" above does not seem to be spendable immediately 
  #   pause:
  #     seconds: 600